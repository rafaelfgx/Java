# docker compose up --detach --build --force-recreate --remove-orphans

name: java
services:
    application:
        image: application
        container_name: application
        depends_on:
            - kafka
            - localstack
            - mongo
            - postgres
            - elk-logstash
        build:
            context: ..
            dockerfile: .docker/dockerfile
        ports:
            - "8090:8080"
        environment:
            #SPRING_PROFILES_ACTIVE: production
            SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/database
            SPRING_DATASOURCE_USERNAME: admin
            SPRING_DATASOURCE_PASSWORD: password
            SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongo:27017/database?authSource=admin
            SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9094
            AWS_ENDPOINT: http://localstack:4566
            AWS_REGION: us-east-1
            AWS_ACCESS_KEY_ID: test
            AWS_SECRET_ACCESS_KEY: test
            ELK_LOGSTASH: elk-logstash:5000
            FEIGN_CLIENTS_JSONPLACEHOLDER_URL: https://jsonplaceholder.typicode.com
    elk-elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
        container_name: elk-elasticsearch
        ports:
            - "9200:9200"
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=false
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
    elk-logstash:
        image: docker.elastic.co/logstash/logstash:9.0.0
        container_name: elk-logstash
        depends_on:
            - elk-elasticsearch
        ports:
            - "5000:5000"
        volumes:
            - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    elk-kibana:
        image: docker.elastic.co/kibana/kibana:9.0.0
        container_name: elk-kibana
        depends_on:
            - elk-elasticsearch
        ports:
            - "5601:5601"
        environment:
            - ELASTICSEARCH_HOSTS=http://elk-elasticsearch:9200
    elk-apm-server:
        image: docker.elastic.co/apm/apm-server:9.0.0
        container_name: elk-apm
        depends_on:
            - elk-elasticsearch
            - elk-kibana
        ports:
            - "8200:8200"
        environment:
            - output.elasticsearch.hosts=["http://elk-elasticsearch:9200"]
            - apm-server.host=0.0.0.0:8200
            - apm-server.auth.anonymous.enabled=true
            - apm-server.kibana.enabled=true
            - apm-server.kibana.host=http://elk-kibana:5601
    kafka:
        image: apache/kafka
        container_name: kafka
        ports:
            - "9092:9092"
        environment:
            KAFKA_NODE_ID: 1
            KAFKA_PROCESS_ROLES: broker,controller
            KAFKA_LISTENERS: CONTROLLER://:9093,PLAINTEXT://:9094,EXTERNAL://:9092
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9094,EXTERNAL://localhost:9092
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    kafka-admin:
        image: obsidiandynamics/kafdrop
        container_name: kafka-admin
        depends_on:
            - kafka
        ports:
            - "9000:9000"
        environment:
            KAFKA_BROKERCONNECT: kafka:9094
    localstack:
        image: localstack/localstack
        container_name: localstack
        ports:
            - "4566:4566"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./localstack.sh:/etc/localstack/init/ready.d/localstack.sh
        environment:
            - SERVICES=sqs,sqs-query,s3
    mongo:
        image: mongo
        container_name: mongo
        ports:
            - "27017:27017"
        volumes:
            - mongo:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: password
    mongo-admin:
        image: mongo-express
        container_name: mongo-admin
        depends_on:
            - mongo
        ports:
            - "27018:8081"
        environment:
            ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongo:27017
            ME_CONFIG_MONGODB_ADMINUSERNAME: admin
            ME_CONFIG_MONGODB_ADMINPASSWORD: password
            ME_CONFIG_BASICAUTH: false
    postgres:
        image: postgres
        container_name: postgres
        ports:
            - "5432:5432"
        volumes:
            - postgres:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: database
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: password
    postgres-admin:
        image: dpage/pgadmin4
        container_name: postgres-admin
        depends_on:
            - postgres
        ports:
            - "5433:80"
        volumes:
            - ./postgres-admin.json:/pgadmin4/servers.json
            - postgres-admin:/var/lib/pgadmin
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@admin.com
            PGADMIN_DEFAULT_PASSWORD: password
            PGADMIN_CONFIG_SERVER_MODE: "False"
            PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
volumes:
    mongo:
    postgres:
    postgres-admin:
